import { bigintKey } from './bigintKey';
import { uint } from './uint';

// Fast bit counting method.  For any given index (0-255),
// the value represents the number of bits in that number.
const bits = [
  0,
  1,
  1,
  2,
  1,
  2,
  2,
  3,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4, // 0   - 15
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5, // 16  - 31
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5, // 32  - 47
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 48  - 63
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5, // 64  - 79
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 80  - 95
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 96  - 111
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6,
  4,
  5,
  5,
  6,
  5,
  6,
  6,
  7, // 112 - 127
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5, // 128 - 143
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 144 - 159
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 160 - 175
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6,
  4,
  5,
  5,
  6,
  5,
  6,
  6,
  7, // 176 - 191
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6, // 192 - 207
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6,
  4,
  5,
  5,
  6,
  5,
  6,
  6,
  7, // 208 - 223
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  6,
  4,
  5,
  5,
  6,
  5,
  6,
  6,
  7, // 224 - 239
  4,
  5,
  5,
  6,
  5,
  6,
  6,
  7,
  5,
  6,
  6,
  7,
  6,
  7,
  7,
  8, // 240 - 255
];

const getBitCount = (bitField: bigint): number =>
  bits[bigintKey(uint(bitField & 0x00000000000000ffn))] +
  bits[bigintKey(uint((bitField & 0x000000000000ff00n) >> 8n))] +
  bits[bigintKey(uint((bitField & 0x0000000000ff0000n) >> 16n))] +
  bits[bigintKey(uint((bitField & 0x00000000ff000000n) >> 24n))] +
  bits[bigintKey(uint((bitField & 0x000000ff00000000n) >> 32n))] +
  bits[bigintKey(uint((bitField & 0x0000ff0000000000n) >> 40n))] +
  bits[bigintKey(uint((bitField & 0x00ff000000000000n) >> 48n))] +
  bits[bigintKey(uint((bitField & 0xff00000000000000n) >> 56n))];

// This table is equivalent to 1 bit shifted left by the index.
// The lookup is faster than the left shift operator.
const CardMasksTable: bigint[] = [
  0x1n,
  0x2n,
  0x4n,
  0x8n,
  0x10n,
  0x20n,
  0x40n,
  0x80n,
  0x100n,
  0x200n,
  0x400n,
  0x800n,
  0x1000n,
  0x2000n,
  0x4000n,
  0x8000n,
  0x10000n,
  0x20000n,
  0x40000n,
  0x80000n,
  0x100000n,
  0x200000n,
  0x400000n,
  0x800000n,
  0x1000000n,
  0x2000000n,
  0x4000000n,
  0x8000000n,
  0x10000000n,
  0x20000000n,
  0x40000000n,
  0x80000000n,
  0x100000000n,
  0x200000000n,
  0x400000000n,
  0x800000000n,
  0x1000000000n,
  0x2000000000n,
  0x4000000000n,
  0x8000000000n,
  0x10000000000n,
  0x20000000000n,
  0x40000000000n,
  0x80000000000n,
  0x100000000000n,
  0x200000000000n,
  0x400000000000n,
  0x800000000000n,
  0x1000000000000n,
  0x2000000000000n,
  0x4000000000000n,
  0x8000000000000n,
];

const TOTAL_CARDS = 52;

function* iterateHandsHelper(
  knownCardsMask: bigint,
  allDeadCardsMask: bigint,
  numIterations: number,
  loopStart = TOTAL_CARDS,
  previousCardMask = 0n,
): Generator<bigint, void> {
  if (numIterations >= 1) {
    for (let i = loopStart - 1; i >= 0; i -= 1) {
      const cardMask = CardMasksTable[i];
      if ((allDeadCardsMask & cardMask) !== 0n) {
        continue;
      }
      yield* iterateHandsHelper(
        knownCardsMask,
        allDeadCardsMask,
        numIterations - 1,
        i,
        cardMask | previousCardMask,
      );
    }
  } else {
    yield previousCardMask | knownCardsMask;
  }
}

// eslint-disable-next-line jsdoc/require-jsdoc
export function* iterateCardMasks(
  knownCardsMask: bigint,
  deadCardsMask: bigint,
  cardCount: number,
): Generator<bigint, void> {
  const allDeadCardsMask = deadCardsMask | knownCardsMask;
  const numIterations = cardCount - getBitCount(knownCardsMask);

  yield* iterateHandsHelper(knownCardsMask, allDeadCardsMask, numIterations);
}
